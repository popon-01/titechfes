(in-package titechfes)

(defun load-map (file-name game)
  (cond ((string= "txt" (pathname-type file-name))
	 (load-txt-map file-name game))
	((string= "stg" (pathname-type file-name))
	 (load-stg-map file-name game))
	(t (error "~a is not stage file." file-name))))

(defun load-txt-map (file-name game)
  (setf (map-size game) (list 0 0))
  (iter (for h upfrom 16 by 32)
	(for line in-file file-name using #'read-line)
	(setf (second (map-size game)) (+ 16 h))
	(appending
	 (iter (for w upfrom 16 by 32)
	       (for code in (split-sequence #\space line))
	       (setf (first (map-size game)) (+ 16 w))
	       (push-game-object (make-game-object code w h)
				 game)))))

(defun load-stg-map (file-name game)
  (setf (map-size game) (list 0 0)) 
  (iter (for h upfrom 16 by 32)
	(for line in-file file-name using #'read-line)
	(setf (second (map-size game)) (+ 16 h)
	      (first (map-size game)) (length line))
	(appending
	 (iter (for w upfrom 16 by 32)
	       (for code in-string line)
	       (setf (first (map-size game)) (+ 16 w))
	       (push-game-object (make-game-object 
				  (string code) w h)
				 game)))))

(defmacro map-char-table (&rest table)
  `(cond ,@(mapcar (lambda (xs)
		     `((string= ,(car xs) code)
		       ,(let* ((delta (nth 3 xs))
			       (dx (if delta (first delta) 0))
			       (dy (if delta (second delta) 0)))
			      `(make-instance ',(second xs)
					      ,@(nth 2 xs) 
					      :x (+ x ,dx) 
					      :y (+ y ,dy))))) table)))

(defun make-game-object (code x y)
  (map-char-table
   ("1" wall)
   ("p" player)
   ("a" aomura)
   ("t" tullet)
   ("n" snipe-tullet)
   ("f" flying2)
   ("o" fly-and-stop)
   ("d" kuribo)
   ("l" kuribo-tullet)
   ("M" demon-gate)
   ("B" big)
   ("i" item)
   (">" move-wall (:vx 1))
   ("<" move-wall (:vx -1))
   ("k" weapon-item (:weapon 'knife))
   ("x" weapon-item (:weapon 'axe))
   ("j" weapon-item (:weapon 'javelin))
   ("e" weapon-item (:weapon 'bomb))
   ("+" weapon-item (:weapon 'boomerang))
   ("2" damage-wall)
   ("3" break-wall)
   ("4" easy-break-wall)
   ("r" recovery-item)
   ("c" score-item)
   ("s" jump-up)
   ("z" dash-up)
   ("O" clear-item)
   ("5" red-switch () (0 4))
   ("h" active-red-wall)
   ("H" inactive-red-wall)
   ("6" blue-switch () (0 4))
   ("q" active-blue-wall)
   ("Q" inactive-blue-wall)
   ("7" yellow-switch () (0 4))
   ("y" active-yellow-wall)
   ("Y" inactive-yellow-wall)
   ("8" green-switch () (0 4))
   ("g" active-green-wall)
   ("G" inactive-green-wall)
   ("K" stage-key)
   ("9" locked-wall)))


(defmethod push-game-object ((obj null) game))
(defmethod push-game-object ((obj gameobject) (game game))
  (push obj (all-object game)))

(defmethod push-game-object ((w wall) (game game))
  (push w (mapchips game))
  (call-next-method))

(defmethod push-game-object ((p player) (game game))
  (setf (player game) p)
  (call-next-method))

(defmethod push-game-object ((e enemy) (game game))
  (push e (enemies game))
  (call-next-method))

(defmethod push-game-object ((b bullet) (game game))
  (push b (bullets game))
  (call-next-method))

(defmethod push-game-object ((b enemy-bullet) (game game))
  (push b (enemy-bullets game))
  (call-next-method))
