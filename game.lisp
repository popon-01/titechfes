(in-package titechfes)

(define-class game ()
  (window-size '(640 480))
  (map-size nil)
  (camera '(0 0))
  (player nil)
  (all-object nil)
  (update-object-list nil)
  (collide-object-list nil)
  (mapchips nil)
  (enemies nil)
  (enemy-bullets nil)
  (bullets nil)
  (stage nil)
  (state :title)
  (statef nil)
  (wall-flag '(:red t :blue t :yellow t :green t))
  (keystate (make-instance 'game-input)))


(defmethod initialize-instance :after ((game game) &key)
  (update-state game))

(defun run-state (game)
  (funcall (statef game) game))

(defun update-state (game)
  (setf (statef game)
	(case (state game)
	  (:title #'title-state)
	  (:game #'gaming-state)
	  (:over #'gameover-state)
	  (:stage-clear #'stage-clear-state))))

(defun change-state (sym game)
  (setf (state game) sym)
  (update-state game))

(defun more-near-player-p (obj game)
  (and (< (abs (- (get-x (player game))
		  (get-x obj))) 640)
       (< (abs (- (get-y (player game))
		  (get-y obj))) 480)))

(defun near-player-p (obj game)
  (and (< (abs (- (get-x (player game))
		  (get-x obj))) 700)
       (< (abs (- (get-y (player game))
		  (get-y obj))) 540)))

(defun in-camera-p (obj game)
  (and (<= -32 (x-in-camera (get-x obj) game) 
	   (+ 32 (first (window-size game))))
       (<= -32 (y-in-camera (get-y obj) game)
	   (+ 32 (second (window-size game))))))
